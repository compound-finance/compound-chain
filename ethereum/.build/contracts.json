{
  "contracts": {
    "contracts/CashToken.sol:CashToken": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "60a060405234801561001057600080fd5b506040516101fd3803806101fd8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166101966100676000398061013e52506101966000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806323b872dd1461004657806370a0823114610090578063f851a440146100c8575b600080fd5b61007c6004803603606081101561005c57600080fd5b506001600160a01b038135811691602081013590911690604001356100ec565b604080519115158252519081900360200190f35b6100b6600480360360208110156100a657600080fd5b50356001600160a01b0316610121565b60408051918252519081900360200190f35b6100d061013c565b604080516001600160a01b039092168252519081900360200190f35b6001600160a01b0392831660009081526020819052604080822080548490039055929093168352912080549091019055600190565b6001600160a01b031660009081526020819052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212205b2e64af7c2f9b204de1de0257df1941c7986f1c7d076c484e1507684484ed8564736f6c63430007050033",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CashToken.sol\":\"CashToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CashToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n// TODO: finish implementing ERC20\\ncontract CashToken {\\n\\n\\taddress immutable public admin;\\n\\tmapping(address => uint256) balances;\\n\\n\\tconstructor(address admin_) {\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n\\t// TODO: implement\\n\\t// function getHypotheticalIndex() public view returns (uint)\\n\\n\\tfunction balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n\\n    // TODO: actually implement CASH principal balances etc\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        returns (bool)\\n    {\\n        // require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        // require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        // require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] -= _value;\\n        balances[_to] += _value;\\n        // allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        // emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0457222ec4298f213f8b7470ca07679fe3a5f5f733ada4f73f9f90f681db06d4\"}},\"version\":1}"
    },
    "contracts/IERC20.sol:ICash": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchHypotheticalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchHypotheticalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20.sol\":\"ICash\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface ICash is IERC20 {\\n    function burn(uint256 amount) external;\\n    function fetchHypotheticalIndex() external returns (uint);\\n}\\n\",\"keccak256\":\"0xd788c6114f44590cc1cf789f301ac54009c78c01eb65534599d83ed29b421803\"}},\"version\":1}"
    },
    "contracts/IERC20.sol:IERC20": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface ICash is IERC20 {\\n    function burn(uint256 amount) external;\\n    function fetchHypotheticalIndex() external returns (uint);\\n}\\n\",\"keccak256\":\"0xd788c6114f44590cc1cf789f301ac54009c78c01eb65534599d83ed29b421803\"}},\"version\":1}"
    },
    "contracts/Starport.sol:Starport": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract ICash\",\"name\":\"cash_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"authHash\",\"type\":\"bytes32\"}],\"name\":\"ChangeAuthorities\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldIndex\",\"type\":\"uint256\"}],\"name\":\"LockCash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_CHAIN_IDENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"authorities_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isAdminNotice\",\"type\":\"bool\"}],\"name\":\"assertNoticeAuthorized\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"contract ICash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"notice\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"changeAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eraId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorities\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"authorityCount\",\"type\":\"uint256\"}],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"data\",\"type\":\"address[]\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isNoticeUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedMsg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"notice\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "bin": "60a06040523480156200001157600080fd5b5060405162001d0c38038062001d0c8339810160408190526200003491620000f7565b6001600160601b0319606083901b1660805280516200005b90600090602084019062000064565b505050620001ff565b828054828255906000526020600020908101928215620000bc579160200282015b82811115620000bc57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000085565b50620000ca929150620000ce565b5090565b5b80821115620000ca5760008155600101620000cf565b8051620000f281620001e6565b919050565b600080604083850312156200010a578182fd5b82516200011781620001e6565b602084810151919350906001600160401b038082111562000136578384fd5b818601915086601f8301126200014a578384fd5b8151818111156200015757fe5b838102915062000169848301620001c2565b8181528481019084860184860187018b101562000184578788fd5b8795505b83861015620001b1576200019c81620000e5565b83526001959095019491860191860162000188565b508096505050505050509250929050565b6040518181016001600160401b0381118282101715620001de57fe5b604052919050565b6001600160a01b0381168114620001fc57600080fd5b50565b60805160601c611ae06200022c6000398061072352806107ad5280610cd75280610e525250611ae06000f3fe6080604052600436106100f75760003560e01c8063961be3911161008a578063c21b486511610059578063c21b48651461026a578063c8ace93a1461028c578063cd5cc2d6146102ac578063ea4b1e57146102d957610106565b8063961be39114610200578063a734f06e14610215578063aa1e84de1461022a578063af9806f01461024a57610106565b8063494503d4116100c6578063494503d41461018b57806366dfbfb4146101ab5780637c5a43ec146101cb57806385894cda146101eb57610106565b806319045a251461010b57806319fc775c146101415780631ee116bf146101615780633f109d231461016957610106565b36610106576101046102f9565b005b600080fd5b34801561011757600080fd5b5061012b6101263660046112f7565b61034a565b604051610138919061157b565b60405180910390f35b34801561014d57600080fd5b5061010461015c3660046113ca565b61043c565b6101046102f9565b34801561017557600080fd5b5061017e6106f1565b604051610138919061162c565b34801561019757600080fd5b5061012b6101a63660046112df565b6106f7565b3480156101b757600080fd5b506101046101c63660046114ee565b610721565b3480156101d757600080fd5b5061017e6101e63660046112df565b610779565b3480156101f757600080fd5b5061017e610783565b34801561020c57600080fd5b5061012b6107ab565b34801561022157600080fd5b5061012b6107cf565b34801561023657600080fd5b5061017e61024536600461138a565b6107e7565b34801561025657600080fd5b5061010461026536600461146d565b61081a565b34801561027657600080fd5b5061027f610a3e565b60405161013891906115d4565b34801561029857600080fd5b506101046102a736600461146d565b610aa0565b3480156102b857600080fd5b506102cc6102c73660046112df565b610c15565b6040516101389190611621565b3480156102e557600080fd5b5061017e6102f4366004611288565b610c2a565b7fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee33346040516103409392919061158f565b60405180910390a1565b600081516041146103765760405162461bcd60e51b815260040161036d906116b9565b60405180910390fd5b60208201516040830151606084015160001a601b81148061039a57508060ff16601c145b6103b65760405162461bcd60e51b815260040161036d90611811565b6000600187838686604051600081526020016040526040516103db9493929190611635565b6020604051602081039080840390855afa1580156103fd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104305760405162461bcd60e51b815260040161036d90611653565b93505050505b92915050565b36600061044c600382898b611a5c565b9150915060405160200161045f9061156c565b6040516020818303038152906040528051906020012061047f83836107e7565b1461049c5760405162461bcd60e51b815260040161036d90611985565b60238710156104bd5760405162461bcd60e51b815260040161036d906118d4565b60006104cd602360038a8c611a5c565b8101906104da91906112df565b90508315610512576104ef6001546001610c5a565b811461050d5760405162461bcd60e51b815260040161036d90611755565b610533565b60015481146105335760405162461bcd60e51b815260040161036d9061171e565b600061053f8a8a6107e7565b60008181526002602052604090205490915060ff16156105715760405162461bcd60e51b815260040161036d90611853565b60608667ffffffffffffffff8111801561058a57600080fd5b506040519080825280602002602001820160405280156105b4578160200160208202803683370190505b50905060005b878110156106b95760006106378d8d6040516105d792919061155c565b60405180910390208b8b858181106105eb57fe5b90506020028101906105fd91906119f3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061034a92505050565b90506106438382610c7d565b156106605760405162461bcd60e51b815260040161036d906117ba565b61066a8b82610c7d565b151560011461068b5760405162461bcd60e51b815260040161036d90611958565b8083838151811061069857fe5b6001600160a01b0390921660209283029190910190910152506001016105ba565b506106c48951610779565b815110156106e45760405162461bcd60e51b815260040161036d90611900565b5050505050505050505050565b60015481565b6000818154811061070757600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561076a576107658233610cd3565b610775565b610775828233610db4565b5050565b6003900460010190565b6040516020016107929061156c565b6040516020818303038152906040528051906020012081565b7f000000000000000000000000000000000000000000000000000000000000000081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b600082826040516020016107fc92919061155c565b60405160208183030381529060405280519060200120905092915050565b606383101561083b5760405162461bcd60e51b815260040161036d906119b1565b6108a48484600080548060200260200160405190810160405280929190818152602001828054801561089657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610878575b50505050508585600161043c565b3660006108b48560438189611a5c565b909250905060208106156108da5760405162461bcd60e51b815260040161036d906118ae565b6020810460608167ffffffffffffffff811180156108f757600080fd5b50604051908082528060200260200182016040528015610921578160200160208202803683370190505b50905060005b8281101561099b57600061093c826020610e04565b9050600061094b826020610c5a565b9050600061095b8284898b611a5c565b8101906109689190611265565b90508085858151811061097757fe5b6001600160a01b039290921660209283029190910190910152505050600101610927565b5060006109a782610c2a565b90507f43ef9dd72725bc13a95e9b9aeb61a67a9d75e1174d76224c01d6a5f7a8e9c662816040516109d8919061162c565b60405180910390a181516109f39060009060208501906110db565b50600160026000610a048c8c6107e7565b81526020810191909152604001600020805460ff191691151591909117905560018054610a3091610c5a565b600155505050505050505050565b60606000805480602002602001604051908101604052809291908181526020018280548015610a9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a78575b5050505050905090565b60a38314610ac05760405162461bcd60e51b815260040161036d906117e2565b610b2984846000805480602002602001604051908101604052809291908181526020018280548015610b1b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610afd575b50505050508585600061043c565b366000610b398560438189611a5c565b90925090506000610b4d6020828486611a5c565b810190610b5a9190611265565b90506000610b6c604060208587611a5c565b810190610b799190611265565b90506000610b8b606060408688611a5c565b810190610b9891906112df565b9050600160026000610baa8c8c6107e7565b815260200190815260200160002060006101000a81548160ff0219169083151502179055507fc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db09838383604051610c029392919061158f565b60405180910390a1505050505050505050565b60026020526000908152604090205460ff1681565b600081604051602001610c3d919061151d565b604051602081830303815290604052805190602001209050919050565b808201828110156104365760405162461bcd60e51b815260040161036d9061178c565b6000805b8351811015610cc957826001600160a01b0316848281518110610ca057fe5b60200260200101516001600160a01b03161415610cc1576001915050610436565b600101610c81565b5060009392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ea8f6356040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d3057600080fd5b505af1158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6891906114d6565b9050610d748284610e3b565b7fe23f78c6eafbb2aa00b63818eb56ed8b15e2f7fe575edb5eebb9e34ab78b1bfa828483604051610da7939291906115b3565b60405180910390a1505050565b6000610dc1828585610efe565b90507fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f3838383604051610df69392919061158f565b60405180910390a150505050565b6000811580610e1f57505080820282828281610e1c57fe5b04145b6104365760405162461bcd60e51b815260040161036d906116f0565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610e8b9085903090869060040161158f565b602060405180830381600087803b158015610ea557600080fd5b505af1158015610eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edd91906112c3565b15156001146107755760405162461bcd60e51b815260040161036d90611930565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f2d919061157b565b60206040518083038186803b158015610f4557600080fd5b505afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d91906114d6565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd90610fb09088903090899060040161158f565b602060405180830381600087803b158015610fca57600080fd5b505af1158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100291906112c3565b15156001146110235760405162461bcd60e51b815260040161036d9061188a565b6040516370a0823160e01b81526000906001600160a01b038516906370a082319061105290309060040161157b565b60206040518083038186803b15801561106a57600080fd5b505afa15801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a291906114d6565b90506110ae81836110b8565b9695505050505050565b808203828111156104365760405162461bcd60e51b815260040161036d9061168a565b828054828255906000526020600020908101928215611130579160200282015b8281111561113057825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906110fb565b5061113c929150611140565b5090565b5b8082111561113c5760008155600101611141565b600082601f830112611165578081fd5b813567ffffffffffffffff81111561117957fe5b6020808202611189828201611a38565b838152935081840185830182870184018810156111a557600080fd5b600092505b848310156111d15780356111bd81611a84565b8252600192909201919083019083016111aa565b505050505092915050565b60008083601f8401126111ed578081fd5b50813567ffffffffffffffff811115611204578182fd5b602083019150836020808302850101111561121e57600080fd5b9250929050565b60008083601f840112611236578182fd5b50813567ffffffffffffffff81111561124d578182fd5b60208301915083602082850101111561121e57600080fd5b600060208284031215611276578081fd5b813561128181611a84565b9392505050565b600060208284031215611299578081fd5b813567ffffffffffffffff8111156112af578182fd5b6112bb84828501611155565b949350505050565b6000602082840312156112d4578081fd5b815161128181611a9c565b6000602082840312156112f0578081fd5b5035919050565b60008060408385031215611309578081fd5b8235915060208084013567ffffffffffffffff80821115611328578384fd5b818601915086601f83011261133b578384fd5b81358181111561134757fe5b611359601f8201601f19168501611a38565b9150808252878482850101111561136e578485fd5b8084840185840137810190920192909252919491935090915050565b6000806020838503121561139c578182fd5b823567ffffffffffffffff8111156113b2578283fd5b6113be85828601611225565b90969095509350505050565b600080600080600080608087890312156113e2578182fd5b863567ffffffffffffffff808211156113f9578384fd5b6114058a838b01611225565b9098509650602089013591508082111561141d578384fd5b6114298a838b01611155565b9550604089013591508082111561143e578384fd5b5061144b89828a016111dc565b909450925050606087013561145f81611a9c565b809150509295509295509295565b60008060008060408587031215611482578384fd5b843567ffffffffffffffff80821115611499578586fd5b6114a588838901611225565b909650945060208701359150808211156114bd578384fd5b506114ca878288016111dc565b95989497509550505050565b6000602082840312156114e7578081fd5b5051919050565b60008060408385031215611500578182fd5b82359150602083013561151281611a84565b809150509250929050565b815160009082906020808601845b838110156115505781516001600160a01b03168552938201939082019060010161152b565b50929695505050505050565b6000828483379101908152919050565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b818110156116155783516001600160a01b0316835292840192918401916001016115f0565b50909695505050505050565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b6020808252601b908201527f4e6f74696365206d757374207573652063757272656e74206572610000000000604082015260600190565b6020808252601f908201527f41646d696e206e6f74696365206d75737420696e6372656d656e742065726100604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b6020808252600e908201526d4475706c6963617465642073696760901b604082015260600190565b602080825260159082015274092dcecc2d8d2c840eadcd8dec6d640d8cadccee8d605b1b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526018908201527f4e6f746963652063616e206e6f74206265207265757365640000000000000000604082015260600190565b6020808252600a90820152692a3930b739b332b924b760b11b604082015260600190565b6020808252600c908201526b45786365737320627974657360a01b604082015260600190565b60208082526012908201527113595cdcdcd859d9481d1bdbc81cda1bdc9d60721b604082015260600190565b60208082526016908201527510995b1bddc81c5d5bdc9d5b481d1a1c995cda1bdb1960521b604082015260600190565b6020808252600e908201526d0a8e4c2dce6cccae492dc86c2e6d60931b604082015260600190565b6020808252601390820152722ab730baba3437b934bd32b21039b4b3b732b960691b604082015260600190565b602080825260129082015271496e76616c696420436861696e205479706560701b604082015260600190565b60208082526022908201527f4e657720617574686f72697479207365742063616e206e6f7420626520656d70604082015261747960f01b606082015260800190565b6000808335601e19843603018112611a09578283fd5b83018035915067ffffffffffffffff821115611a23578283fd5b60200191503681900382131561121e57600080fd5b60405181810167ffffffffffffffff81118282101715611a5457fe5b604052919050565b60008085851115611a6b578182fd5b83861115611a77578182fd5b5050820193919092039150565b6001600160a01b0381168114611a9957600080fd5b50565b8015158114611a9957600080fdfea2646970667358221220f5f05e99c5503bcd44151dcd874beb6792f447328c9df2830565d6ea1ca7812464736f6c63430007050033",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICash\",\"name\":\"cash_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"authHash\",\"type\":\"bytes32\"}],\"name\":\"ChangeAuthorities\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldIndex\",\"type\":\"uint256\"}],\"name\":\"LockCash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_CHAIN_IDENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"authorities_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isAdminNotice\",\"type\":\"bool\"}],\"name\":\"assertNoticeAuthorized\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"contract ICash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"notice\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"changeAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eraId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorities\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"authorityCount\",\"type\":\"uint256\"}],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"data\",\"type\":\"address[]\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isNoticeUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedMsg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"notice\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Starport.sol\":\"Starport\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface ICash is IERC20 {\\n    function burn(uint256 amount) external;\\n    function fetchHypotheticalIndex() external returns (uint);\\n}\\n\",\"keccak256\":\"0xd788c6114f44590cc1cf789f301ac54009c78c01eb65534599d83ed29b421803\"},\"contracts/Starport.sol\":{\"content\":\"pragma solidity ^0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n// via https://github.com/dapphub/ds-math/blob/master/src/math.sol\\nfunction add_(uint x, uint y) pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub_(uint x, uint y) pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul_(uint x, uint y) pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\ncontract Starport {\\n\\n\\tICash immutable public cash;\\n\\n\\taddress constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\tbytes32 constant public ETH_CHAIN_IDENT = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n\\taddress[] public authorities;\\n\\n\\tuint public eraId; // TODO: could bitpack here and use uint32\\n\\tmapping(bytes32 => bool) public isNoticeUsed;\\n\\n\\tevent LockCash(address holder, uint amount, uint yieldIndex);\\n\\tevent Lock(address asset, address holder, uint amount);\\n\\tevent Unlock(address asset, address account, uint amount);\\n\\tevent ChangeAuthorities(bytes32 authHash);\\n\\n\\tconstructor(ICash cash_, address[] memory authorities_) {\\n\\t\\tcash = cash_;\\n\\t\\tauthorities = authorities_;\\n\\t}\\n\\n\\t// ** L1 Asset Interface **\\n\\n\\tfunction lock(uint amount, address asset) public {\\n\\t\\tif (asset == address(cash)) {\\n\\t\\t\\tlockCashInternal(amount, msg.sender);\\n\\t\\t} else {\\n\\t\\t\\tlockInternal(amount, asset, msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction lockETH() public payable {\\n\\t\\t// TODO: Check Supply Cap\\n\\t\\temit Lock(ETH_ADDRESS, msg.sender, msg.value);\\n\\t}\\n\\n\\tfunction lockCashInternal(uint amount, address sender) internal {\\n\\t\\t// cash.burn(amount);\\n\\t\\tuint yieldIndex = cash.fetchHypotheticalIndex();\\n\\t\\ttransferInCash(sender, amount);\\n\\t\\temit LockCash(sender, amount, yieldIndex);\\n\\t}\\n\\n\\tfunction lockInternal(uint amount, address asset, address sender) internal {\\n\\t\\t// TODO: Check Supply Cap\\n\\t\\tuint amountTransferred = transferIn(sender, amount, IERC20(asset));\\n\\t\\temit Lock(asset, sender, amountTransferred);\\n\\t}\\n\\n\\t// Make sure that the amount we ask for\\n\\tfunction transferIn(address from, uint amount, IERC20 asset) internal returns (uint) {\\n\\t\\tuint balBefore = asset.balanceOf(address(this));\\n\\t\\trequire(asset.transferFrom(from, address(this), amount) == true, \\\"TransferIn\\\");\\n\\t\\tuint balAfter = asset.balanceOf(address(this));\\n\\t\\treturn sub_(balAfter, balBefore);\\n\\t}\\n\\n\\tfunction transferInCash(address from, uint amount) internal {\\n\\t\\trequire(cash.transferFrom(from, address(this), amount) == true, \\\"TransferInCash\\\");\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tlockETH();\\n\\t}\\n\\n\\t// ** L2 Message Ports **\\n\\t\\n\\t// @dev notice = (bytes3 chainIdent, uint generationId, uint interGenerationId, address asset, address account, uint amount)\\n\\tfunction unlock(bytes calldata notice, bytes[] calldata signatures) external {\\n\\t\\trequire(notice.length == 163, \\\"Invalid unlock length\\\"); // 67 + 96\\n\\n\\t\\tassertNoticeAuthorized(notice, authorities, signatures, false);\\n\\n\\t\\tbytes calldata body = notice[67:];\\n\\t\\t// Decode the notice\\n\\t\\taddress asset = abi.decode(body[:32], (address));\\n\\t\\taddress account = abi.decode(body[32:64], (address));\\n\\t\\tuint amount = abi.decode(body[64:96], (uint));\\n\\n\\t\\tisNoticeUsed[hash(notice)] = true;\\n\\t\\temit Unlock(asset, account, amount);\\n\\t\\t// IERC20(asset).transfer(amount, account);\\n\\t}\\n\\n\\t// @dev notice = (bytes3 chainIdent, uint256 eraId, uint256 eraIndex, address[] newAuths)\\n\\tfunction changeAuthorities(bytes calldata notice, bytes[] calldata signatures) external {\\n\\t\\trequire(notice.length >= 99, \\\"New authority set can not be empty\\\");//67 bytes of header, 32 * n bytes of auths\\n\\t\\tassertNoticeAuthorized(notice, authorities, signatures, true);\\n\\n\\t\\tbytes calldata body = notice[67:];\\n\\t\\trequire(body.length % 32 == 0, \\\"Excess bytes\\\");\\n\\t\\tuint numAuths = body.length / 32;// evm word size is 32 bytes\\n\\n\\t\\t// Decode the notice into a new auth array\\n\\t\\taddress[] memory newAuths = new address[](numAuths);\\n\\t\\tfor (uint i = 0; i < numAuths; i ++) {\\n\\t\\t\\tuint startIdx = mul_(i, 32);\\n\\t\\t\\tuint endIdx = add_(startIdx, 32);\\n\\t\\t\\taddress newAuth = abi.decode(body[startIdx:endIdx], (address));\\n\\t\\t\\tnewAuths[i] = newAuth;\\n\\t\\t}\\n\\t\\tbytes32 authHash = hash(newAuths);\\n\\t\\temit ChangeAuthorities(authHash);\\n\\t\\tauthorities = newAuths;\\n\\t\\tisNoticeUsed[hash(notice)] = true;\\n\\t\\teraId = add_(eraId, 1);\\n\\t}\\n\\n\\n\\t// ** VIEW HELPERS **\\n\\n\\tfunction getAuthorities() public view returns (address[] memory){\\n\\t\\treturn authorities;\\n\\t}\\n\\n\\t// @dev Reverts if notice is not authorized\\n\\t// * the first 7 bytes of a notice is always {bytes3 chainIdent, uint256 eraId}\\n\\tfunction assertNoticeAuthorized(\\n\\t\\tbytes calldata message,\\n\\t\\taddress[] memory authorities_,\\n\\t\\tbytes[] calldata signatures,\\n\\t\\tbool isAdminNotice\\n\\t) public view {\\n\\t\\tbytes calldata chainIdent = message[0:3];\\n\\t\\trequire(hash(chainIdent) == ETH_CHAIN_IDENT, \\\"Invalid Chain Type\\\");\\n\\t\\trequire(message.length >= 35, \\\"Messsage too short\\\");\\n\\n\\t\\tuint noticeEraId = abi.decode(message[3:35], (uint));\\n\\t\\tif (isAdminNotice) {\\n\\t\\t\\trequire(noticeEraId == add_(eraId, 1), \\\"Admin notice must increment era\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(noticeEraId == eraId, \\\"Notice must use current era\\\");\\n\\t\\t}\\n\\n\\t\\tbytes32 noticeHash = hash(message);\\n\\t\\trequire(isNoticeUsed[noticeHash] == false, \\\"Notice can not be reused\\\");\\n\\n\\t\\taddress[] memory sigs = new address[](signatures.length);\\n\\t\\tfor (uint i = 0; i < signatures.length; i++) {\\n\\t\\t\\taddress signer = recover(keccak256(message), signatures[i]);\\n\\t\\t\\trequire(contains(sigs, signer) == false, \\\"Duplicated sig\\\");\\n\\t\\t\\trequire(contains(authorities_, signer) == true, \\\"Unauthorized signer\\\");\\n\\t\\t\\tsigs[i] = signer;\\n\\t\\t}\\n\\t\\trequire(sigs.length >= getQuorum(authorities_.length), \\\"Below quorum threshold\\\");\\n\\t}\\n\\n\\t// ** PURE HELPERS **\\n\\n\\tfunction hash(address[] memory data) public pure returns (bytes32) {\\n\\t\\treturn keccak256((abi.encodePacked(data)));\\n\\t}\\n\\n\\tfunction hash(bytes calldata data) public pure returns (bytes32) {\\n\\t\\treturn keccak256((abi.encodePacked(data)));\\n\\t}\\n\\n\\tfunction contains(address[] memory arr, address elem) internal pure returns (bool) {\\n\\t\\tfor(uint i = 0; i < arr.length; i++) {\\n\\t\\t\\tif (arr[i] == elem) return true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// @dev Quorum is > 1/3 authorities approving\\n\\tfunction getQuorum(uint authorityCount) public pure returns (uint) {\\n\\t\\treturn (authorityCount / 3) + 1;\\n\\t}\\n\\n\\n\\t// @dev Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\\n\\tfunction recover(bytes32 hashedMsg, bytes memory signature) public pure returns (address) {\\n\\t    // Check the signature length\\n\\t    if (signature.length != 65) {\\n\\t        revert(\\\"ECDSA: invalid signature length\\\");\\n\\t    }\\n\\n\\t    // Divide the signature in r, s and v variables\\n\\t    bytes32 r;\\n\\t    bytes32 s;\\n\\t    uint8 v;\\n\\n\\t    // ecrecover takes the signature parameters, and the only way to get them\\n\\t    // currently is to use assembly.\\n\\t    // solhint-disable-next-line no-inline-assembly\\n\\t    assembly {\\n\\t        r := mload(add(signature, 0x20))\\n\\t        s := mload(add(signature, 0x40))\\n\\t        v := byte(0, mload(add(signature, 0x60)))\\n\\t    }\\n\\n\\t    require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n\\t    // If the signature is valid (and not malleable), return the signer address\\n\\t    address signer = ecrecover(hashedMsg, v, r, s);\\n\\t    require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n\\t    return signer;\\n\\t}\\n}\\n\",\"keccak256\":\"0x6a040674150754922762955062c72dbc52338b59eb9ab97e45c3233e616f2666\"}},\"version\":1}"
    },
    "contracts/test/MockCashToken.sol:MockCashToken": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchHypotheticalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "60a060405234801561001057600080fd5b5060405161023b38038061023b8339818101604052606081101561003357600080fd5b508051602080830151604093840151606084901b6001600160601b0319166080526001600160a01b03908116600090815292839052938220559116906101b59061008690398061015d52506101b56000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806323b872dd146100515780635ea8f6351461009b57806370a08231146100b5578063f851a440146100db575b600080fd5b6100876004803603606081101561006757600080fd5b506001600160a01b038135811691602081013590911690604001356100ff565b604080519115158252519081900360200190f35b6100a3610134565b60408051918252519081900360200190f35b6100a3600480360360208110156100cb57600080fd5b50356001600160a01b0316610140565b6100e361015b565b604080516001600160a01b039092168252519081900360200190f35b6001600160a01b0392831660009081526020819052604080822080548490039055929093168352912080549091019055600190565b670de0b6b3a764000090565b6001600160a01b031660009081526020819052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220f441ae250660633f995815f238fcd151a2f608c0ed86e23eefaa3808f5cf66fd64736f6c63430007050033",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchHypotheticalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockCashToken.sol\":\"MockCashToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CashToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n// TODO: finish implementing ERC20\\ncontract CashToken {\\n\\n\\taddress immutable public admin;\\n\\tmapping(address => uint256) balances;\\n\\n\\tconstructor(address admin_) {\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n\\t// TODO: implement\\n\\t// function getHypotheticalIndex() public view returns (uint)\\n\\n\\tfunction balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n\\n    // TODO: actually implement CASH principal balances etc\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        returns (bool)\\n    {\\n        // require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        // require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        // require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] -= _value;\\n        balances[_to] += _value;\\n        // allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        // emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0457222ec4298f213f8b7470ca07679fe3a5f5f733ada4f73f9f90f681db06d4\"},\"contracts/test/MockCashToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\nimport \\\"../CashToken.sol\\\";\\n\\ncontract MockCashToken is CashToken {\\n\\n\\tconstructor(address admin_, uint initialSupply_, address holder_) CashToken(admin_) {\\n\\t\\tbalances[holder_] = initialSupply_;\\n\\t}\\n\\n\\tfunction fetchHypotheticalIndex() public returns (uint) {\\n\\t\\treturn 1e18;\\n\\t}\\n}\\n\",\"keccak256\":\"0xcec96eb71c4145127456e745e8e36cb33081cb9e359af749408712ec42431333\"}},\"version\":1}"
    },
    "contracts/test/SafeMath.sol:SafeMath": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201325c5ca1bdf345c1b7c98c5cbd819e054da4343af15de2db8720452a642452364736f6c63430007050033",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0c1a0d2096e18610ff0198a99f0ae9e7e96ea3d3e6a48285635306ca3af82d48\"}},\"version\":1}"
    },
    "contracts/test/StandardToken.sol:ERC20": {
      "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20 interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0c1a0d2096e18610ff0198a99f0ae9e7e96ea3d3e6a48285635306ca3af82d48\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20  {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20 {\\n    using SafeMath for uint256;\\n\\n\\n    uint256 totalSupply_;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n    mapping(address => uint256) balances;\\n\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) {\\n        totalSupply_ = _initialAmount;\\n        balances[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n/**\\n * @title The Compound Faucet Test Token\\n * @author Compound\\n * @notice A simple test token that lets anyone get more of it.\\n */\\ncontract FaucetToken is StandardToken {\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol)\\n        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol)\\n    {\\n    }\\n\\n    function allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        totalSupply_ += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\\n\",\"keccak256\":\"0x7d833ad4f2a9f14ebb687d32aa988a600b0b4c91871f132f1f66b145e56cbe8b\"}},\"version\":1}"
    },
    "contracts/test/StandardToken.sol:FaucetToken": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "60806040523480156200001157600080fd5b5060405162000c3c38038062000c3c833981810160405260808110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b506040818152602083015192018051929491939192846401000000008211156200011657600080fd5b9083019060208201858111156200012c57600080fd5b82516401000000008111828201881017156200014757600080fd5b82525081516020918201929091019080838360005b83811015620001765781810151838201526020016200015c565b50505050905090810190601f168015620001a45780820380516001836020036101000a031916815260200191505b50604090815260008881553381526005602090815291902088905586518894508793508692508591620001dd9160019186019062000216565b508051620001f390600290602084019062000216565b50506003805460ff191660ff9290921691909117905550620002c2945050505050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024e576000855562000299565b82601f106200026957805160ff191683800117855562000299565b8280016001018555821562000299579182015b82811115620002995782518255916020019190600101906200027c565b50620002a7929150620002ab565b5090565b5b80821115620002a75760008155600101620002ac565b61096a80620002d26000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063313ce56711610066578063313ce567146101de57806370a08231146101fc57806395d89b4114610222578063a9059cbb1461022a578063dd62ed3e146102565761009e565b806306fdde03146100a357806308bca56614610120578063095ea7b31461014e57806318160ddd1461018e57806323b872dd146101a8575b600080fd5b6100ab610284565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e55781810151838201526020016100cd565b50505050905090810190601f1680156101125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61014c6004803603604081101561013657600080fd5b506001600160a01b038135169060200135610311565b005b61017a6004803603604081101561016457600080fd5b506001600160a01b03813516906020013561036f565b604080519115158252519081900360200190f35b6101966103d5565b60408051918252519081900360200190f35b61017a600480360360608110156101be57600080fd5b506001600160a01b038135811691602081013590911690604001356103db565b6101e66105ec565b6040805160ff9092168252519081900360200190f35b6101966004803603602081101561021257600080fd5b50356001600160a01b03166105f5565b6100ab610610565b61017a6004803603604081101561024057600080fd5b506001600160a01b038135169060200135610668565b6101966004803603604081101561026c57600080fd5b506001600160a01b0381358116916020013516610785565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103095780601f106102de57610100808354040283529160200191610309565b820191906000526020600020905b8154815290600101906020018083116102ec57829003601f168201915b505050505081565b6001600160a01b0382166000818152600560209081526040808320805486019055825485019092558151848152915130927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35050565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005490565b60006001600160a01b0383166104225760405162461bcd60e51b815260040180806020018281038252602881526020018061090d6028913960400191505060405180910390fd5b6001600160a01b03841660009081526005602052604090205482111561048f576040805162461bcd60e51b815260206004820181905260248201527f5472616e7366657246726f6d3a20496e61646571756174652062616c616e6365604482015290519081900360640190fd5b6001600160a01b03841660009081526004602090815260408083203384529091529020548211156104f15760405162461bcd60e51b81526004018080602001828103825260228152602001806108eb6022913960400191505060405180910390fd5b6001600160a01b03841660009081526005602052604090205461051490836107b0565b6001600160a01b03808616600090815260056020526040808220939093559085168152205461054390836107f9565b6001600160a01b03808516600090815260056020908152604080832094909455918716815260048252828120338252909152205461058190836107b0565b6001600160a01b03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035460ff1681565b6001600160a01b031660009081526005602052604090205490565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103095780601f106102de57610100808354040283529160200191610309565b60006001600160a01b03831661067d57600080fd5b336000908152600560205260409020548211156106e1576040805162461bcd60e51b815260206004820152601e60248201527f5472616e736665723a20696e73756666696369656e742062616c616e63650000604482015290519081900360640190fd5b336000908152600560205260409020546106fb90836107b0565b33600090815260056020526040808220929092556001600160a01b0385168152205461072790836107f9565b6001600160a01b0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b60006107f283836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610853565b9392505050565b6000828201838110156107f2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156108e25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108a757818101518382015260200161088f565b50505050905090810190601f1680156108d45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657246726f6d3a20496e616465717561746520616c6c6f77616e63655472616e7366657246726f6d3a2043616e27742073656e6420746f2061646472657373207a65726fa264697066735822122075113b2549f5c77b68d5375b19e9bb4eaeb298db60b34d5cb1eb9e459998b63664736f6c63430007050033",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{},\"title\":\"The Compound Faucet Test Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A simple test token that lets anyone get more of it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"FaucetToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0c1a0d2096e18610ff0198a99f0ae9e7e96ea3d3e6a48285635306ca3af82d48\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20  {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20 {\\n    using SafeMath for uint256;\\n\\n\\n    uint256 totalSupply_;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n    mapping(address => uint256) balances;\\n\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) {\\n        totalSupply_ = _initialAmount;\\n        balances[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n/**\\n * @title The Compound Faucet Test Token\\n * @author Compound\\n * @notice A simple test token that lets anyone get more of it.\\n */\\ncontract FaucetToken is StandardToken {\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol)\\n        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol)\\n    {\\n    }\\n\\n    function allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        totalSupply_ += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\\n\",\"keccak256\":\"0x7d833ad4f2a9f14ebb687d32aa988a600b0b4c91871f132f1f66b145e56cbe8b\"}},\"version\":1}"
    },
    "contracts/test/StandardToken.sol:StandardToken": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "60806040523480156200001157600080fd5b5060405162000b9a38038062000b9a833981810160405260808110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b506040818152602083015192018051929491939192846401000000008211156200011657600080fd5b9083019060208201858111156200012c57600080fd5b82516401000000008111828201881017156200014757600080fd5b82525081516020918201929091019080838360005b83811015620001765781810151838201526020016200015c565b50505050905090810190601f168015620001a45780820380516001836020036101000a031916815260200191505b5060409081526000888155338152600560209081529190208890558651620001d694506001935090870191506200020b565b508051620001ec9060029060208401906200020b565b50506003805460ff191660ff9290921691909117905550620002b79050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024357600085556200028e565b82601f106200025e57805160ff19168380011785556200028e565b828001600101855582156200028e579182015b828111156200028e57825182559160200191906001019062000271565b506200029c929150620002a0565b5090565b5b808211156200029c5760008155600101620002a1565b6108d380620002c76000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146101a557806370a08231146101c357806395d89b41146101e9578063a9059cbb146101f1578063dd62ed3e1461021d57610093565b806306fdde0314610098578063095ea7b31461011557806318160ddd1461015557806323b872dd1461016f575b600080fd5b6100a061024b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100da5781810151838201526020016100c2565b50505050905090810190601f1680156101075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101416004803603604081101561012b57600080fd5b506001600160a01b0381351690602001356102d8565b604080519115158252519081900360200190f35b61015d61033e565b60408051918252519081900360200190f35b6101416004803603606081101561018557600080fd5b506001600160a01b03813581169160208101359091169060400135610344565b6101ad610555565b6040805160ff9092168252519081900360200190f35b61015d600480360360208110156101d957600080fd5b50356001600160a01b031661055e565b6100a0610579565b6101416004803603604081101561020757600080fd5b506001600160a01b0381351690602001356105d1565b61015d6004803603604081101561023357600080fd5b506001600160a01b03813581169160200135166106ee565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102d05780601f106102a5576101008083540402835291602001916102d0565b820191906000526020600020905b8154815290600101906020018083116102b357829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005490565b60006001600160a01b03831661038b5760405162461bcd60e51b81526004018080602001828103825260288152602001806108766028913960400191505060405180910390fd5b6001600160a01b0384166000908152600560205260409020548211156103f8576040805162461bcd60e51b815260206004820181905260248201527f5472616e7366657246726f6d3a20496e61646571756174652062616c616e6365604482015290519081900360640190fd5b6001600160a01b038416600090815260046020908152604080832033845290915290205482111561045a5760405162461bcd60e51b81526004018080602001828103825260228152602001806108546022913960400191505060405180910390fd5b6001600160a01b03841660009081526005602052604090205461047d9083610719565b6001600160a01b0380861660009081526005602052604080822093909355908516815220546104ac9083610762565b6001600160a01b0380851660009081526005602090815260408083209490945591871681526004825282812033825290915220546104ea9083610719565b6001600160a01b03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035460ff1681565b6001600160a01b031660009081526005602052604090205490565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102d05780601f106102a5576101008083540402835291602001916102d0565b60006001600160a01b0383166105e657600080fd5b3360009081526005602052604090205482111561064a576040805162461bcd60e51b815260206004820152601e60248201527f5472616e736665723a20696e73756666696369656e742062616c616e63650000604482015290519081900360640190fd5b336000908152600560205260409020546106649083610719565b33600090815260056020526040808220929092556001600160a01b038516815220546106909083610762565b6001600160a01b0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b600061075b83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506107bc565b9392505050565b60008282018381101561075b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818484111561084b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108105781810151838201526020016107f8565b50505050905090810190601f16801561083d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657246726f6d3a20496e616465717561746520616c6c6f77616e63655472616e7366657246726f6d3a2043616e27742073656e6420746f2061646472657373207a65726fa264697066735822122048be536beda106cf831d5cb957704b06a1a941d5e1532676b05379af7d0802fa64736f6c63430007050033",
      "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard token. https://github.com/ethereum/EIPs/issues/20 Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Standard ERC20 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0c1a0d2096e18610ff0198a99f0ae9e7e96ea3d3e6a48285635306ca3af82d48\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20  {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20 {\\n    using SafeMath for uint256;\\n\\n\\n    uint256 totalSupply_;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n    mapping(address => uint256) balances;\\n\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) {\\n        totalSupply_ = _initialAmount;\\n        balances[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n/**\\n * @title The Compound Faucet Test Token\\n * @author Compound\\n * @notice A simple test token that lets anyone get more of it.\\n */\\ncontract FaucetToken is StandardToken {\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol)\\n        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol)\\n    {\\n    }\\n\\n    function allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        totalSupply_ += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\\n\",\"keccak256\":\"0x7d833ad4f2a9f14ebb687d32aa988a600b0b4c91871f132f1f66b145e56cbe8b\"}},\"version\":1}"
    }
  },
  "version": "0.7.5+commit.eb77ed08.Darwin.appleclang"
}